import os
import sys
import time
from auth import register_user, login_user, verify_email_code, get_all_users_except_current
from document_manager import (
    sign_and_send_document, get_sent_documents, get_received_documents, 
    verify_document, get_document_details, get_verification_history,
    get_document_statistics
)

CURRENT_USER = None

def clear_screen():
    """Limpa a tela do terminal"""
    os.system("cls" if os.name == "nt" else "clear")

def display_message(message, message_type="info"):
    """Exibe mensagem formatada com tipo espec√≠fico"""
    if message_type == "info":
        print(f"\n[INFO] {message}")
    elif message_type == "success":
        print(f"\n[‚úÖ SUCESSO] {message}")
    elif message_type == "error":
        print(f"\n[‚ùå ERRO] {message}")
    elif message_type == "warning":
        print(f"\n[‚ö†Ô∏è AVISO] {message}")
    
    input("\nPressione Enter para continuar...")

def get_user_input(prompt, sensitive=False):
    """Obt√©m entrada do usu√°rio, com op√ß√£o para entrada sens√≠vel"""
    if sensitive:
        import getpass
        return getpass.getpass(prompt)
    return input(prompt)

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def auth_menu():
    """Menu de autentica√ß√£o (login/registro)"""
    while True:
        clear_screen()
        print_header("SISTEMA DE ASSINATURA DIGITAL RSA-PSS")
        print("""
üîê AUTENTICA√á√ÉO

1. Fazer Login
2. Cadastrar Novo Usu√°rio
0. Sair do Sistema
""")
        choice = get_user_input("Escolha uma op√ß√£o: ").strip()

        if choice == "1":
            handle_login()
            if CURRENT_USER:
                break
        elif choice == "2":
            handle_register()
        elif choice == "0":
            display_message("Saindo do sistema. At√© logo!", "info")
            sys.exit()
        else:
            display_message("Op√ß√£o inv√°lida. Tente novamente.", "error")

def handle_login():
    """Gerencia o processo de login"""
    global CURRENT_USER
    clear_screen()
    print_header("LOGIN")
    
    email = get_user_input("Email: ").strip()
    password = get_user_input("Senha: ", sensitive=True).strip()

    success, message, user_data = login_user(email, password)
    if success:
        CURRENT_USER = user_data
        display_message(f"Bem-vindo(a), {user_data['nome']}!", "success")
    else:
        display_message(message, "error")
        if user_data:  # user_data aqui √© user_id se email n√£o verificado
            handle_email_verification(user_data)

def handle_register():
    """Gerencia o processo de registro"""
    clear_screen()
    print_header("CADASTRO DE NOVO USU√ÅRIO")
    
    nome = get_user_input("Nome completo: ").strip()
    email = get_user_input("Email: ").strip()
    password = get_user_input("Senha: ", sensitive=True).strip()
    confirm_password = get_user_input("Confirme a senha: ", sensitive=True).strip()

    if password != confirm_password:
        display_message("As senhas n√£o coincidem.", "error")
        return

    success, message, user_id = register_user(nome, email, password)
    if success:
        print(f"\n[‚úÖ SUCESSO] {message}")
        input("\nPressione Enter para continuar...")
        # Vai direto para verifica√ß√£o de email com o user_id retornado
        handle_email_verification(user_id)
    else:
        display_message(message, "error")

def handle_email_verification(user_id):
    """Gerencia a verifica√ß√£o de email"""
    clear_screen()
    print_header("VERIFICA√á√ÉO DE EMAIL")
    print("Um c√≥digo de 6 d√≠gitos foi enviado para seu email.")
    print("O c√≥digo expira em 1 minuto.")
    
    code = get_user_input("C√≥digo de verifica√ß√£o: ").strip()
    success, message = verify_email_code(user_id, code)
    display_message(message, "success" if success else "error")

def main_menu():
    """Menu principal do sistema"""
    while True:
        clear_screen()
        stats = get_document_statistics(CURRENT_USER['user_id'])
        
        print_header(f"MENU PRINCIPAL - {CURRENT_USER['nome']}")
        print(f"""
üë§ Usu√°rio: {CURRENT_USER['nome']} ({CURRENT_USER['email']})

üìä ESTAT√çSTICAS:
   ‚Ä¢ Documentos enviados: {stats['sent_count']} (verificados: {stats['verified_sent']})
   ‚Ä¢ Documentos recebidos: {stats['received_count']} (verificados: {stats['verified_received']})

üìã OP√á√ïES:
1. üìù Assinar e Enviar Documento
2. üì§ Ver Documentos Enviados
3. üì• Ver Documentos Recebidos
0. üö™ Sair do Sistema
""")
        choice = get_user_input("Escolha uma op√ß√£o: ").strip()

        if choice == "1":
            handle_sign_and_send_document()
        elif choice == "2":
            handle_view_sent_documents()
        elif choice == "3":
            handle_view_received_documents()
        elif choice == "0":
            display_message("Saindo do sistema. At√© logo!", "info")
            sys.exit()
        else:
            display_message("Op√ß√£o inv√°lida. Tente novamente.", "error")

def handle_sign_and_send_document():
    """Gerencia assinatura e envio de documento"""
    clear_screen()
    print_header("ASSINAR E ENVIAR DOCUMENTO")
    
    document_name = get_user_input("T√≠tulo do documento: ").strip()
    if not document_name:
        display_message("T√≠tulo n√£o pode estar vazio.", "error")
        return
    
    user_password = get_user_input("Sua senha (para criptografar chave privada): ", sensitive=True).strip()
    if not user_password:
        display_message("Senha √© obrigat√≥ria.", "error")
        return

    # Lista usu√°rios dispon√≠veis
    users = get_all_users_except_current(CURRENT_USER["user_id"])
    if not users:
        display_message("N√£o h√° outros usu√°rios cadastrados para enviar documentos.", "warning")
        return

    print("\nüìã DESTINAT√ÅRIOS DISPON√çVEIS:")
    for i, user in enumerate(users):
        print(f"{i+1}. {user['nome']} ({user['email']})")
    
    while True:
        try:
            receiver_choice = int(get_user_input("\nEscolha o n√∫mero do destinat√°rio: "))
            if 1 <= receiver_choice <= len(users):
                selected_receiver = users[receiver_choice - 1]
                break
            else:
                print("Escolha inv√°lida. Tente novamente.")
        except ValueError:
            print("Digite um n√∫mero v√°lido.")

    print(f"\nüì§ Enviando para: {selected_receiver['nome']} ({selected_receiver['email']})")
    
    # Pergunta sobre interface gr√°fica
    use_gui_input = get_user_input("Usar interface gr√°fica para sele√ß√£o de arquivo? (s/n): ").strip().lower()
    use_gui = use_gui_input in ['s', 'sim', 'y', 'yes']

    success, message = sign_and_send_document(
        CURRENT_USER["user_id"],
        CURRENT_USER["email"],
        selected_receiver["user_id"],
        selected_receiver["email"],
        document_name,
        user_password,
        use_gui=use_gui
    )
    
    display_message(message, "success" if success else "error")

def handle_view_sent_documents():
    """Visualiza documentos enviados"""
    clear_screen()
    print_header("DOCUMENTOS ENVIADOS")
    
    documents = get_sent_documents(CURRENT_USER["user_id"])
    if not documents:
        display_message("Voc√™ n√£o enviou nenhum documento ainda.", "info")
        return

    print("\nüì§ SEUS DOCUMENTOS ENVIADOS:\n")
    for i, doc in enumerate(documents):
        status_icon = "‚úÖ" if doc['status'] == 'verified' else "üì§" if doc['status'] == 'sent' else "‚ùå"
        print(f"{i+1}. {status_icon} {doc['document_name']}")
        print(f"   üìß Para: {doc['receiver_name']} ({doc['receiver_email']})")
        print(f"   üìÖ Enviado: {doc['created_at']}")
        print(f"   üìä Status: {doc['status'].upper()}")
        if doc['verified_at']:
            print(f"   ‚úÖ Verificado: {doc['verified_at']}")
        print(f"   üÜî ID: {doc['document_id']}")
        print()
    
    input("Pressione Enter para voltar ao menu principal.")

def handle_view_received_documents():
    """Visualiza documentos recebidos"""
    clear_screen()
    print_header("DOCUMENTOS RECEBIDOS")
    
    documents = get_received_documents(CURRENT_USER["user_id"])
    if not documents:
        display_message("Voc√™ n√£o recebeu nenhum documento ainda.", "info")
        return

    print("\nüì• DOCUMENTOS RECEBIDOS:\n")
    for i, doc in enumerate(documents):
        status_icon = "‚úÖ" if doc['status'] == 'verified' else "üì•" if doc['status'] == 'sent' else "‚ùå"
        print(f"{i+1}. {status_icon} {doc['document_name']}")
        print(f"   üìß De: {doc['sender_name']} ({doc['sender_email']})")
        print(f"   üìÖ Recebido: {doc['created_at']}")
        print(f"   üìä Status: {doc['status'].upper()}")
        if doc['verified_at']:
            print(f"   ‚úÖ Verificado: {doc['verified_at']}")
        print(f"   üÜî ID: {doc['document_id']}")
        print()
    
    while True:
        choice = get_user_input("Digite o n√∫mero do documento para verificar (0 para voltar): ").strip()
        if choice == "0":
            break
        try:
            doc_index = int(choice) - 1
            if 0 <= doc_index < len(documents):
                selected_doc_id = documents[doc_index]["document_id"]
                handle_verify_document(selected_doc_id)
                break
            else:
                print("Escolha inv√°lida. Tente novamente.")
        except ValueError:
            print("Digite um n√∫mero v√°lido.")

def handle_verify_document(document_id):
    """Verifica um documento espec√≠fico"""
    clear_screen()
    print_header("VERIFICA√á√ÉO DE ASSINATURA")
    
    doc_details = get_document_details(document_id, CURRENT_USER["user_id"])
    if not doc_details:
        display_message("Documento n√£o encontrado ou sem permiss√£o.", "error")
        return

    print(f"üìÑ Documento: {doc_details['document_name']}")
    print(f"üìß Remetente: {doc_details['sender_name']} ({doc_details['sender_email']})")
    print(f"üìÖ Data de envio: {doc_details['created_at']}")
    print(f"üìä Status atual: {doc_details['status'].upper()}")
    
    # Mostra pr√©via do conte√∫do
    content_preview = doc_details["document_content"][:200]
    if len(doc_details["document_content"]) > 200:
        content_preview += "..."
    print(f"\nüìù Pr√©via do conte√∫do:\n{content_preview}")

    confirm = get_user_input("\nüîç Deseja verificar a assinatura deste documento? (s/n): ").strip().lower()
    if confirm in ['s', 'sim', 'y', 'yes']:
        success, message = verify_document(document_id, CURRENT_USER["user_id"])
        display_message(message, "success" if success else "error")
        
        # Exibe hist√≥rico de verifica√ß√£o
        history, error = get_verification_history(document_id, CURRENT_USER["user_id"])
        if error:
            display_message(f"Erro ao carregar hist√≥rico: {error}", "error")
        elif history:
            print("\nüìã HIST√ìRICO DE VERIFICA√á√ïES:")
            print("-" * 50)
            for entry in history:
                status = "‚úÖ V√ÅLIDA" if entry["result"] == "verified" else "‚ùå INV√ÅLIDA"
                print(f"‚Ä¢ {status}")
                print(f"  üë§ Verificado por: {entry['verifier_name']} ({entry['verifier_email']})")
                print(f"  üìÖ Data: {entry['verified_at']}")
                if entry["error_message"]:
                    print(f"  ‚ö†Ô∏è Erro: {entry['error_message']}")
                print()
            input("Pressione Enter para continuar...")

def show_system_info():
    """Mostra informa√ß√µes do sistema"""
    clear_screen()
    print_header("INFORMA√á√ïES DO SISTEMA")
    print("""
üîê SISTEMA DE ASSINATURA DIGITAL RSA-PSS

üìã Caracter√≠sticas:
‚Ä¢ Algoritmo: RSA-PSS (Probabilistic Signature Scheme)
‚Ä¢ Hash: SHA3-256
‚Ä¢ Tamanho da chave: 2048 bits
‚Ä¢ Banco de dados: SQLite
‚Ä¢ Interface: Terminal com sele√ß√£o gr√°fica de arquivos

üõ°Ô∏è Seguran√ßa:
‚Ä¢ Chaves √∫nicas por documento
‚Ä¢ Chaves privadas criptografadas com senha do usu√°rio
‚Ä¢ Verifica√ß√£o de integridade via hash
‚Ä¢ Logs de verifica√ß√£o para auditoria

üë®‚Äçüíª Desenvolvido para o semin√°rio de Seguran√ßa Computacional
""")
    input("Pressione Enter para continuar...")

if __name__ == "__main__":
    try:
        # Garante que as tabelas do banco de dados existam
        from database import create_tables
        create_tables()
        
        # Mostra informa√ß√µes do sistema
        show_system_info()
        
        # Inicia o fluxo de autentica√ß√£o
        auth_menu()
        
        # Se autenticado, vai para o menu principal
        if CURRENT_USER:
            main_menu()
            
    except KeyboardInterrupt:
        print("\n\nSistema interrompido pelo usu√°rio. At√© logo!")
        sys.exit()
    except Exception as e:
        print(f"\nErro inesperado: {e}")
        sys.exit(1)

